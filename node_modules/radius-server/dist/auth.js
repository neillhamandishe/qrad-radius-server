var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import NodeCache from 'node-cache';
import { Cache, ExpirationStrategy, MemoryStorage } from '@hokify/node-ts-cache';
const cacheStrategy = new ExpirationStrategy(new MemoryStorage());
/**
 * this is just a simple abstraction to provide
 * an application layer for caching credentials
 */
export class Authentication {
    constructor(authenticator, logger) {
        this.authenticator = authenticator;
        this.cache = new NodeCache();
        this.logger = logger.context('Authentication');
    }
    async authenticate(username, password) {
        const cacheKey = `usr:${username}|pwd:${password}`;
        const fromCache = this.cache.get(cacheKey);
        if (fromCache !== undefined) {
            this.logger.log(`Cached Auth Result for user ${username}`, fromCache ? 'SUCCESS' : 'Failure');
            return fromCache;
        }
        const authResult = await this.authenticator.authenticate(username, password);
        this.logger.log(`Auth Result for user ${username}`, authResult ? 'SUCCESS' : 'Failure');
        this.cache.set(cacheKey, !!authResult, authResult ? 86400 : 60); // cache for one day on success, otherwise just for 60 seconds
        return authResult;
    }
}
__decorate([
    Cache(cacheStrategy, { ttl: 60000 }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", Promise)
], Authentication.prototype, "authenticate", null);
//# sourceMappingURL=auth.js.map