import * as radius from 'radius';
import { PacketHandler } from './PacketHandler.js';
export class RadiusService {
    constructor(secret, authentication) {
        this.secret = secret;
        this.packetHandler = new PacketHandler(authentication);
    }
    async handleMessage(msg) {
        const packet = radius.decode({ packet: msg, secret: this.secret });
        if (packet.code !== 'Access-Request') {
            console.error('unknown packet type: ', packet.code);
            return undefined;
        }
        const response = await this.packetHandler.handlePacket(packet);
        // still no response, we are done here
        if (!response || !response.code) {
            return undefined;
        }
        // all fine, return radius encoded response
        return {
            data: radius.encode_response({
                packet,
                code: response.code,
                secret: this.secret,
                attributes: response.attributes,
            }),
            // if message is accept or reject, we conside this as final message
            // this means we do not expect a reponse from the client again (acknowledgement for package)
            expectAcknowledgment: response.code === PacketResponseCode.AccessChallenge,
        };
    }
}
//# sourceMappingURL=RadiusService.js.map