/// <reference types="node" />
import * as tls from 'tls';
import { IPacket, IPacketHandler, IPacketHandlerResult } from '../../../../interfaces/PacketHandler.js';
import { IEAPMethod } from '../../../../interfaces/EAPMethod.js';
import { IAuthentication } from '../../../../interfaces/Authentication.js';
import { ILogger } from '../../../../interfaces/Logger.js';
export declare class EAPTTLS implements IEAPMethod {
    private authentication;
    private tlsOptions;
    private innerTunnel;
    private secret;
    private vlan?;
    private lastProcessedIdentifier;
    private queueData;
    private openTLSSockets;
    private logger;
    getEAPType(): number;
    identify(identifier: number, stateID: string): IPacketHandlerResult;
    constructor(authentication: IAuthentication, tlsOptions: tls.SecureContextOptions, innerTunnel: IPacketHandler, logger: ILogger, secret: string, vlan?: number | undefined);
    private buildEAPTTLS;
    private buildEAPTTLSResponse;
    decodeTTLSMessage(msg: Buffer): {
        decodedFlags: {
            lengthIncluded: boolean;
            moreFragments: boolean;
            start: boolean;
            version: number;
        };
        msglength: any;
        data: Buffer;
    };
    authResponse(identifier: number, success: boolean, socket: tls.TLSSocket, packet: IPacket): IPacketHandlerResult;
    handleMessage(identifier: number, stateID: string, msg: Buffer, packet: IPacket): Promise<IPacketHandlerResult>;
    private transformAttributesArrayToMap;
    private decodeAVPs;
    private buildAVP;
}
