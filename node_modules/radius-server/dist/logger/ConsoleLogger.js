export var LogLevel;
(function (LogLevel) {
    LogLevel["Verbose"] = "verbose";
    LogLevel["Debug"] = "debug";
    LogLevel["Log"] = "log";
    LogLevel["Warn"] = "warn";
    LogLevel["Error"] = "error";
})(LogLevel || (LogLevel = {}));
export class ConsoleLogger {
    constructor(logLevel) {
        this.logLevel = logLevel;
        console.log(`ConsoleLogger initialized with LogLevel: ${logLevel}`);
    }
    error(context, message, ...optionalParams) {
        switch (this.logLevel) {
            case LogLevel.Verbose:
            case LogLevel.Debug:
            case LogLevel.Log:
            case LogLevel.Warn:
            case LogLevel.Error:
                console.error(`[${context}]`, message, ...optionalParams);
                break;
            default:
        }
    }
    warn(context, message, ...optionalParams) {
        switch (this.logLevel) {
            case LogLevel.Verbose:
            case LogLevel.Debug:
            case LogLevel.Log:
            case LogLevel.Warn:
                console.warn(`[${context}]`, message, ...optionalParams);
                break;
            default:
        }
    }
    log(context, message, ...optionalParams) {
        switch (this.logLevel) {
            case LogLevel.Verbose:
            case LogLevel.Debug:
            case LogLevel.Log:
                console.log(`[${context}]`, message, ...optionalParams);
                break;
            default:
        }
    }
    debug(context, message, ...optionalParams) {
        switch (this.logLevel) {
            case LogLevel.Verbose:
            case LogLevel.Debug:
                console.debug(`[${context}]`, message, ...optionalParams);
                break;
            default:
        }
    }
    verbose(context, message, ...optionalParams) {
        switch (this.logLevel) {
            case LogLevel.Verbose:
                console.debug(`[${context}]`, message, ...optionalParams);
                break;
            default:
        }
    }
    context(context) {
        return {
            context: this.context.bind(this),
            error: (message, ...args) => this.error(context, message, ...args),
            warn: (message, ...args) => this.warn(context, message, ...args),
            log: (message, ...args) => this.log(context, message, ...args),
            debug: (message, ...args) => this.debug(context, message, ...args),
            verbose: (message, ...args) => this.verbose(context, message, ...args),
        };
    }
}
//# sourceMappingURL=ConsoleLogger.js.map