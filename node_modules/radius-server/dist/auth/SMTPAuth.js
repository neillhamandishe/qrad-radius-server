import { SMTPClient } from 'smtp-client';
export class SMTPAuth {
    constructor(options, logger) {
        this.port = 25;
        this.useSecureTransport = false;
        this.logger = logger.context('SMTPAuth');
        this.host = options.host;
        if (options.port !== undefined) {
            this.port = options.port;
        }
        if (options.useSecureTransport !== undefined) {
            this.useSecureTransport = options.useSecureTransport;
        }
        if (options.validHosts !== undefined) {
            this.validHosts = options.validHosts;
        }
    }
    async authenticate(username, password) {
        if (this.validHosts) {
            const domain = username.split('@').pop();
            if (!domain || !this.validHosts.includes(domain)) {
                this.logger.log('invalid or no domain in username', username, domain);
                return false;
            }
        }
        const s = new SMTPClient({
            host: this.host,
            port: this.port,
            secure: this.useSecureTransport,
            tlsOptions: {
                servername: this.host, // SNI (needs to be set for gmail)
            },
        }); // secure is currently not part of type def..but it is available: https://www.npmjs.com/package/smtp-client
        let success = false;
        try {
            await s.connect();
            await s.greet({ hostname: 'mx.domain.com' }); // runs EHLO command or HELO as a fallback
            await s.authPlain({ username, password }); // authenticates a user
            success = true;
            s.close(); // runs QUIT command
        }
        catch (err) {
            this.logger.error('imap auth failed', err);
        }
        return success;
    }
}
//# sourceMappingURL=SMTPAuth.js.map