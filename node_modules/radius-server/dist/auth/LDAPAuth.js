import * as LdapAuth from 'ldapauth-fork';
import * as fs from 'fs';
export class LDAPAuth {
    constructor(config, logger) {
        const tlsOptions = {
            key: fs.readFileSync(config.tls.keyFile),
            cert: fs.readFileSync(config.tls.certFile),
            ...config.tlsOptions,
        };
        this.logger = logger.context('LDAPAuth');
        this.ldap = new LdapAuth({
            url: config.url,
            searchBase: config.base,
            tlsOptions,
            searchFilter: config.searchFilter || '(uid={{username}})',
            reconnect: true,
        });
        this.ldap.on('error', (err) => {
            this.logger.error('LdapAuth: ', err);
        });
    }
    async authenticate(username, password) {
        const authResult = await new Promise((resolve, reject) => {
            this.ldap.authenticate(username, password, (err, user) => {
                if (err) {
                    resolve(false);
                    this.logger.error('ldap error', err);
                    // reject(err);
                }
                if (user)
                    resolve(user);
                else
                    reject();
            });
        });
        return authResult;
    }
}
//# sourceMappingURL=LDAPAuth.js.map