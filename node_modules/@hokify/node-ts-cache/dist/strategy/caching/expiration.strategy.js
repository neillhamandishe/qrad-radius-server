import { AbstractBaseStrategy } from './abstract.base.strategy.js';
export class ExpirationStrategy extends AbstractBaseStrategy {
    async getItem(key) {
        const item = await this.storage.getItem(key); // <IExpiringCacheItem>
        if (item && item.meta && item.meta.ttl && this.isItemExpired(item)) {
            await this.storage.setItem(key, undefined);
            return undefined;
        }
        return item ? item.content : undefined;
    }
    async setItem(key, content, options) {
        const mergedOptions = {
            ttl: 60,
            isLazy: true,
            isCachedForever: false,
            ...options
        };
        const meta = !mergedOptions.isCachedForever && {
            ttl: mergedOptions.ttl * 1000,
            createdAt: Date.now()
        };
        if (meta && !mergedOptions.isLazy) {
            setTimeout(() => {
                this.unsetKey(key);
            }, meta.ttl);
        }
        await this.storage.setItem(key, { meta, content });
    }
    async clear() {
        await this.storage.clear();
    }
    isItemExpired(item) {
        return Date.now() > item.meta.createdAt + item.meta.ttl;
    }
    async unsetKey(key) {
        await this.storage.setItem(key, undefined);
    }
}
//# sourceMappingURL=expiration.strategy.js.map