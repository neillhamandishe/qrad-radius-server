import { existsSync, writeFileSync, writeFile, readFile } from 'fs';
export class FsJsonStorage {
    constructor(jsonFilePath) {
        this.jsonFilePath = jsonFilePath;
        if (!existsSync(this.jsonFilePath)) {
            this.createEmptyCache();
        }
    }
    async getItem(key) {
        return (await this.getCacheObject())[key];
    }
    async setItem(key, content) {
        const cache = await this.getCacheObject();
        cache[key] = content;
        await this.setCache(cache);
    }
    async clear() {
        await this.createEmptyCache();
    }
    createEmptyCache() {
        writeFileSync(this.jsonFilePath, JSON.stringify({}));
    }
    async setCache(newCache) {
        await new Promise((resolve, reject) => writeFile(this.jsonFilePath, JSON.stringify(newCache), err => {
            if (err) {
                reject(err);
                return;
            }
            resolve();
        }));
    }
    async getCacheObject() {
        const fileContent = await new Promise((resolve, reject) => readFile(this.jsonFilePath, (err, result) => {
            if (err) {
                reject(err);
                return;
            }
            resolve(result);
        }));
        return JSON.parse(fileContent.toString());
    }
}
//# sourceMappingURL=fs.json.storage.js.map